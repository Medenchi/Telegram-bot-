import os
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ReactionTypeEmoji
from aiohttp import web

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env –∏–ª–∏ Render.env ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
FEEDBACK_CHAT_ID = int(os.getenv("FEEDBACK_CHAT_ID"))
INFO_TOPIC_ID = int(os.getenv("INFO_TOPIC_ID"))

# === –ë–æ—Ç ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –§–∏–∫—Ç–∏–≤–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
async def handle(request):
    return web.Response(text="Bot is running")

app = web.Application()
app.router.add_get("/", handle)


# === –ö–æ–º–∞–Ω–¥–∞ /fb ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–¥–±–µ–∫ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤ ===
@dp.message(Command("fb"))
async def handle_feedback(message: Message):
    if message.chat.id != GROUP_ID:
        return

    args = message.text[len("/fb"):].strip()
    if not args:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /fb.")
        return

    user = message.from_user

    feedback_text = f"""
üì• <b>–ù–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username} | ID: {user.id})
üí¨ –¢–µ–∫—Å—Ç: {args}
üìå –í—Ä–µ–º—è: {message.date.strftime('%Y-%m-%d %H:%M')}
"""

    try:
        await bot.send_message(chat_id=FEEDBACK_CHAT_ID, text=feedback_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–¥–±–µ–∫–∞: {e}")

    # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é
    try:
        await bot.set_message_reaction(
            chat_id=GROUP_ID,
            message_id=message.message_id,
            reaction=[ReactionTypeEmoji(emoji="‚úÖ")]
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    try:
        await bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=message.message_thread_id,
            text="‚úÖ –í–∞—à —Ñ–∏–¥–±–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!"
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")


# === –ö–æ–º–∞–Ω–¥–∞ /say ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ ===
@dp.message(Command("say"))
async def handle_say(message: Message):
    admins = await get_admins(GROUP_ID)
    if message.from_user.id not in admins:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = message.text[len("/say"):].strip()
    if not args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /say [topic_id] [—Ç–µ–∫—Å—Ç]")
        return

    parts = args.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /say [topic_id] [—Ç–µ–∫—Å—Ç]")
        return

    try:
        topic_id = int(parts[0])
    except ValueError:
        await message.reply("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (topic_id).")
        return

    text = parts[1]

    try:
        await bot.send_message(chat_id=GROUP_ID, message_thread_id=topic_id, text=text)
        await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    except Exception as e:
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


# === –ó–∞—â–∏—Ç–∞ —Ç–æ–ø–∏–∫–∞ "–ò–Ω—Ñ–æ" ===
@dp.message()
async def restrict_info_topic(message: Message):
    if message.chat.id != GROUP_ID or message.message_thread_id != INFO_TOPIC_ID:
        return

    if message.from_user.is_bot:
        return

    admins = await get_admins(GROUP_ID)
    if message.from_user.id in admins:
        return

    await message.delete()
    try:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ–º —Ç–æ–ø–∏–∫–µ.", delete_after=5)
    except:
        pass


# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã ===
async def get_admins(chat_id):
    try:
        admins = await bot.get_chat_administrators(chat_id)
        return {admin.user.id for admin in admins}
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        return set()


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ ===
async def start_bot():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


async def start_server():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    print("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")


async def run():
    await asyncio.gather(
        start_bot(),
        start_server()
    )


if __name__ == "__main__":
    asyncio.run(run())  # ‚Üê –≠—Ç–æ –≤–∞–∂–Ω–æ!
