import os
import asyncio
import threading
import time
import requests
import logging

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ReactionTypeEmoji, ContentType
from flask import Flask
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env ===
load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env ===
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (—Å—Ç—Ä–æ–∫–∞)
GROUP_ID = int(os.getenv("GROUP_ID"))  # ID –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã
FEEDBACK_CHAT_ID = int(os.getenv("FEEDBACK_CHAT_ID"))  # ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
INFO_TOPIC_ID = int(os.getenv("INFO_TOPIC_ID"))  # topic_id —Ç–æ–ø–∏–∫–∞ "–ò–Ω—Ñ–æ"
ALLOWED_FB_TOPIC_ID = int(os.getenv("ALLOWED_FB_TOPIC_ID", -1))  # topic_id –¥–ª—è /fb

# === –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = Flask(__name__)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive –∑–∞–ø—Ä–æ—Å–æ–≤ ===
@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# === –§—É–Ω–∫—Ü–∏—è keep-alive (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ) ===
def keep_alive_loop():
    project_url = f"https://{os.getenv('REPL_SLUG')}.{os.getenv('REPL_OWNER')}.replit.dev"
    print(f"üîÅ Keep-alive URL: {project_url}")

    while True:
        try:
            response = requests.get(project_url)
            logger.info(f"‚úÖ Ping: {response.status_code} | {response.text[:20]}...")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ ping: {e}")
        time.sleep(60)  # –ü–∏–Ω–≥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

# –ö–æ–º–∞–Ω–¥–∞ /fb ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–¥–±–µ–∫ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤ (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)
@dp.message(Command("fb"))
async def handle_feedback(message: Message):
    if message.chat.id != GROUP_ID or message.message_thread_id != ALLOWED_FB_TOPIC_ID:
        return

    user = message.from_user
    media_caption = f"""
üì• <b>–ù–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username} | ID: {user.id})
üìå –í—Ä–µ–º—è: {message.date.strftime('%Y-%m-%d %H:%M')}
"""

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
    if message.photo:
        photo = message.photo[-1]  # —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É
        await bot.send_photo(
            chat_id=FEEDBACK_CHAT_ID,
            photo=photo.file_id,
            caption=media_caption,
            parse_mode="HTML"
        )
        await bot.set_message_reaction(
            chat_id=GROUP_ID,
            message_id=message.message_id,
            reaction=[ReactionTypeEmoji(emoji="‚úÖ")]
        )
        await message.reply("‚úÖ –í–∞—à —Ñ–∏–¥–±–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ
    elif message.video:
        video = message.video
        await bot.send_video(
            chat_id=FEEDBACK_CHAT_ID,
            video=video.file_id,
            caption=media_caption,
            parse_mode="HTML"
        )
        await bot.set_message_reaction(
            chat_id=GROUP_ID,
            message_id=message.message_id,
            reaction=[ReactionTypeEmoji(emoji="‚úÖ")]
        )
        await message.reply("‚úÖ –í–∞—à —Ñ–∏–¥–±–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!")

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç
    elif message.text:
        args = message.text[len("/fb"):].strip()
        if not args:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /fb.")
            return

        feedback_text = f"{media_caption}\nüí¨ –¢–µ–∫—Å—Ç: {args}"
        await bot.send_message(chat_id=FEEDBACK_CHAT_ID, text=feedback_text, parse_mode="HTML")
        await bot.set_message_reaction(
            chat_id=GROUP_ID,
            message_id=message.message_id,
            reaction=[ReactionTypeEmoji(emoji="‚úÖ")]
        )
        await message.reply("‚úÖ –í–∞—à —Ñ–∏–¥–±–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!")

    else:
        await message.reply("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")

# –ö–æ–º–∞–Ω–¥–∞ /say ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
@dp.message(Command("say"))
async def handle_say(message: Message):
    admins = await get_admins(GROUP_ID)
    if message.from_user.id not in admins:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = message.text[len("/say"):].strip()
    if not args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /say [topic_id] [—Ç–µ–∫—Å—Ç]")
        return

    parts = args.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /say [topic_id] [—Ç–µ–∫—Å—Ç]")
        return

    try:
        topic_id = int(parts[0])
    except ValueError:
        await message.reply("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (topic_id).")
        return

    text = parts[1]

    try:
        await bot.send_message(chat_id=GROUP_ID, message_thread_id=topic_id, text=text)
        await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    except Exception as e:
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# –ó–∞—â–∏—Ç–∞ —Ç–æ–ø–∏–∫–∞ "–ò–Ω—Ñ–æ"
@dp.message()
async def restrict_info_topic(message: Message):
    if message.chat.id != GROUP_ID or message.message_thread_id != INFO_TOPIC_ID:
        return

    if message.from_user.is_bot:
        return

    admins = await get_admins(GROUP_ID)
    if message.from_user.id in admins:
        return

    await message.delete()
    try:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ–º —Ç–æ–ø–∏–∫–µ.", delete_after=5)
    except:
        pass

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def get_admins(chat_id):
    try:
        admins = await bot.get_chat_administrators(chat_id)
        return {admin.user.id for admin in admins}
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        return set()

# === –ó–∞–ø—É—Å–∫ Flask –∏ –±–æ—Ç–∞ ===
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=lambda: app.run(host='0.0.0.0', port=8080))
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫ keep-alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    keep_alive_thread = threading.Thread(target=keep_alive_loop)
    keep_alive_thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
